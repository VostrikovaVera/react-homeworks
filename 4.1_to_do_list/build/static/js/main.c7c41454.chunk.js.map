{"version":3,"sources":["ToDo.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","props","handleChange","e","setState","inputValue","target","value","state","list","title","isDone","this","length","alert","clearInput","keyCode","addItem","index","map","item","i","stopPropagation","filter","className","type","onChange","onKeyDown","onClick","key","changeStatus","deleteItem","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ugBAEqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAQ,CACXH,WAAY,GACZI,KAAM,CACJ,CACEC,MAAO,cACPC,QAAQ,GAEV,CACED,MAAO,cACPC,QAAQ,KAXG,E,0EAsBjBC,KAAKR,SAAS,CAAEC,WAAY,O,gCAGnB,IACDA,EAAeO,KAAKJ,MAApBH,WAEW,KAAfA,GAAqBA,EAAWQ,OAAS,EAC3CC,MAAM,wCAENF,KAAKR,SAAS,CACZK,KAAK,GAAD,mBACCG,KAAKJ,MAAMC,MADZ,CAEF,CACEC,MAAOL,EACPM,QAAQ,OAKdC,KAAKG,gB,gCAICZ,GACU,KAAdA,EAAEa,SACJJ,KAAKK,Y,mCAIIC,GACXN,KAAKR,SAAS,CACZK,KAAMG,KAAKJ,MAAMC,KAAKU,KAAI,SAACC,EAAMC,GAC/B,O,yVAAO,CAAP,GACKD,EADL,CAEET,OAAQU,IAAMH,EAASE,EAAKT,QAAUS,EAAKT,OAAUS,EAAKT,gB,iCAMvDR,EAAGe,GACZf,EAAEmB,kBAEFV,KAAKR,SAAS,CACZK,KAAMG,KAAKJ,MAAMC,KAAKc,QAAO,SAACH,EAAMC,GAClC,OAAOA,IAAMH,S,+BAKT,IAAD,SACsBN,KAAKJ,MAA1BH,EADD,EACCA,WAAYI,EADb,EACaA,KAEpB,OACE,yBAAKe,UAAU,QACb,wCACA,yBAAKA,UAAU,mBACb,2BACEA,UAAU,aACVC,KAAK,OACLlB,MAAOF,EACPqB,SAAUd,KAAKV,aACfyB,UAAW,SAAAxB,GACT,EAAKwB,UAAUxB,MAGnB,4BACEqB,UAAU,WACVI,QAAS,WACP,EAAKX,YAGN,IANH,aAUF,wBAAIO,UAAU,aACXf,EAAKU,KAAI,SAACC,EAAMC,GAAP,OACR,wBACEG,UAAS,oBAAeJ,EAAKT,OAAS,OAAS,IAC/CkB,IAAKR,EACLO,QAAS,WACP,EAAKE,aAAaT,KAGnBD,EAAKV,MACN,0BACEc,UAAU,mBACVI,QAAS,SAAAzB,GACP,EAAK4B,WAAW5B,EAAGkB,gB,GAhHHW,IAAMC,W,MCMzBC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c7c41454.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class ToDo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputValue: '',\r\n      list: [\r\n        {\r\n          title: 'Make coffee',\r\n          isDone: false\r\n        },\r\n        {\r\n          title: 'Learn React',\r\n          isDone: false\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  clearInput() {\r\n    this.setState({ inputValue: '' });\r\n  }\r\n\r\n  addItem() {\r\n    const { inputValue } = this.state;\r\n\r\n    if (inputValue === '' || inputValue.length < 2) {\r\n      alert('Please, enter at least 2 characters');\r\n    } else {\r\n      this.setState({\r\n        list: [\r\n          ...this.state.list,\r\n          {\r\n            title: inputValue,\r\n            isDone: false\r\n          }\r\n        ]\r\n      });\r\n\r\n      this.clearInput();\r\n    }\r\n  }\r\n\r\n  onKeyDown(e) {\r\n    if (e.keyCode === 13) {\r\n      this.addItem();\r\n    }\r\n  }\r\n\r\n  changeStatus(index) {\r\n    this.setState({\r\n      list: this.state.list.map((item, i) => {\r\n        return {\r\n          ...item,\r\n          isDone: i === index ? (item.isDone = !item.isDone) : item.isDone\r\n        };\r\n      })\r\n    });\r\n  }\r\n\r\n  deleteItem(e, index) {\r\n    e.stopPropagation();\r\n\r\n    this.setState({\r\n      list: this.state.list.filter((item, i) => {\r\n        return i !== index;\r\n      })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { inputValue, list } = this.state;\r\n\r\n    return (\r\n      <div className=\"ToDo\">\r\n        <h1>Todo App</h1>\r\n        <div className=\"ToDo-input-wrap\">\r\n          <input\r\n            className=\"ToDo-input\"\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={this.handleChange}\r\n            onKeyDown={e => {\r\n              this.onKeyDown(e);\r\n            }}\r\n          />\r\n          <button\r\n            className=\"ToDo-btn\"\r\n            onClick={() => {\r\n              this.addItem();\r\n            }}\r\n          >\r\n            {' '}\r\n            Add item\r\n          </button>\r\n        </div>\r\n        <ul className=\"ToDo-list\">\r\n          {list.map((item, i) => (\r\n            <li\r\n              className={`ToDo-item ${item.isDone ? 'done' : ''}`}\r\n              key={i}\r\n              onClick={() => {\r\n                this.changeStatus(i);\r\n              }}\r\n            >\r\n              {item.title}\r\n              <span\r\n                className=\"ToDo-delete-item\"\r\n                onClick={e => {\r\n                  this.deleteItem(e, i);\r\n                }}\r\n              ></span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ToDo from './ToDo';\nimport './App.css';\n\nfunction App() {\n  return <ToDo />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}